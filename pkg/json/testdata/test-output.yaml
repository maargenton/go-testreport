- package: github.com/maargenton/go-cli
  elapsed: 1ms
  coverage: 0
  skipped: true
- package: github.com/maargenton/go-cli/pkg/cli
  tests:
    - name: TestSetProcessEnv
      tests:
        - name: Given an environment as a list of strings
          tests:
            - name: when calling cmd.SetProcessEnv
              tests:
                - name: then all environment values are recorded
    - name: TestCommandRun
      tests:
        - name: Given a well defined command struct
          tests:
            - name: when calling run with valid arguments
              tests:
                - name: then the fields are set and the command is run
            - name: when the command handler returns an error
              tests:
                - name: then the error is returned
            - name: when calling run with invalid arguments
              tests:
                - name: then an error is returned
            - name: when calling run with invalid environment value
              tests:
                - name: then an error is returned
        - name: Given a command with invalid default
          tests:
            - name: when calling run with valid arguments
              tests:
                - name: then an error is returned
        - name: Given a command with bad option
          tests:
            - name: when calling run with valid arguments
              tests:
                - name: then an error is returned
    - name: TestCommandUsage
      tests:
        - name: Given a well defined command struct
          tests:
            - name: when calling Usage()
              tests:
                - name: then a command description is returned
        - name: Given an invalid command struct
          tests:
            - name: when calling Usage()
              tests:
                - name: then the error is printed in place of the usage
    - name: TestCustomUsage
      tests:
        - name: Given a command struct with custom usage
          tests:
            - name: when calling Usage()
              tests:
                - name: then the error is printed in place of the usage
    - name: TestCommandVersion
      tests:
        - name: Given a command struct with version handler
          tests:
            - name: when calling Usage()
              tests:
                - name: then a command description is returned
    - name: TestBashCompletionScript
    - name: TestFormatCompletionSuggestions
      tests:
        - name: Given a list of suggestions
          tests:
            - name: when calling FormatCompletionSuggestions()
              tests:
                - name: then all lines are at most the width
            - name: when calling FormatCompletionSuggestions() with a single option
              tests:
                - name: then only the first word of the option is printed
    - name: TestDefaultCompletion
      tests:
        - name: Given the current directory structure
          tests:
            - name: when Calling DefaultCompletion() with an empty string
              tests:
                - name: then suggestions include the local files
            - name: when Calling DefaultCompletion() with partial filename
              tests:
                - name: then suggestions include only the matching files
            - name: when Calling DefaultCompletion() with partial unique folder name
              tests:
                - name: then suggestions include the files in that folder
    - name: TestFilepathCompletion
      tests:
        - name: Given a call to FilepathCompletion()
          tests:
            - name: when passing a pattern and an empty string
              tests:
                - name: then suggestions include all filenames matching the pattern
            - name: when passing a pattern and a partial name
              tests:
                - name: then suggestions include only filenames matching both
            - name: when passing a pattern and a non-matching partial name
              tests:
                - name: then the pattern is ignored and all matching files are returned
    - name: TestCommandRunCompletion
      tests:
        - name: Given a well defined command struct
          tests:
            - name: when calling Run() with completion request and partial option flag
              tests:
                - name: then the command is not run
                - name: then the completion request error is returned
                - name: then the suggestions contain the matching flag
            - name: when calling Run() with a partial option argument
              tests:
                - name: then the command is not run
                - name: then the completion request error is returned
                - name: then the suggestions contain matching local filenames
            - name: when calling Run() with nothing
              tests:
                - name: then the command is not run
                - name: then the completion request error is returned
                - name: then the suggestions include option flags
                - name: then the suggestions include argument options
        - name: Given a command with custom completion handler
          tests:
            - name: when calling Run() with nothing
              tests:
                - name: then the command is not run
                - name: then the completion request error is returned
                - name: then the suggestions include option flags
                - name: then the suggestions include argument options
            - name: when calling Run() with missing option argument
              tests:
                - name: then the suggestions contain matching local filenames
  elapsed: 431ms
  coverage: 100
  skipped: false
- package: github.com/maargenton/go-cli/pkg/option
  tests:
    - name: TestLineWrap
      tests:
        - name: Given a piece of text wider than allowed
          tests:
            - name: when calling lineWrap()
              tests:
                - name: then all lines are at most the width
            - name: when calling lineWrap() with narrow width
              tests:
                - name: then lines longer than width have no space
        - name: Given a piece of text with line breaks
          tests:
            - name: when calling lineWrap()
              tests:
                - name: then line breaks are preserved
    - name: TestParseOptsTag
    - name: TestParseOptsTagPartial
    - name: TestParseOptsTagInvalid
    - name: TestSplitSliceValues
      tests:
        - name: a,b,c
        - name: a\,b,c
        - name: a,b,\c
        - name: a\\,b,c
        - name: a\\:b;c
    - name: TestUnescapeField
      tests:
        - name: ab\c
        - name: abc\\
        - name: abc\
        - name: abc\\def
    - name: TestScanTagFields
      tests:
        - name: short and long
        - name: short and long with spaces
        - name: with env default
        - name: with env default and spaces
        - name: with escape
    - name: TestGetCompletion
      tests:
        - name: Given an configured OptionSet
          tests:
            - name: when calling GetCompletion() with no arguments
              tests:
                - name: then no specific option is being completed
                - name: then the first argument is being completed
                - name: then available options are listed
            - name: when calling GetCompletion() with flag expecting a value
              tests:
                - name: then only yhe option is returned
            - name: when calling GetCompletion() with flag and value
              tests:
                - name: then remaining options are listed
                  failure: true
                  output:
                    - 'completion_test.go:71:'
                    - '    expected:       set(value.Option) == []string{ "--format <value>", "-v" }'
                    - '    value:          []option.Description{'
                    - "                    \toption.Description{"
                    - "                    \t\tOption:      \"--forfmat <value>\","
                    - "                    \t\tDescription: \"communcation format, e.g. 8N1\","
                    - "                    \t},"
                    - "                    \toption.Description{"
                    - "                    \t\tOption:      \"-v\","
                    - "                    \t\tDescription: \"display additional information on startup\","
                    - "                    \t},"
                    - '                    }'
                    - '    $.Option:       { "--forfmat <value>", "-v" }'
                    - '    extra values:   "--forfmat <value>"'
                    - '    missing values: "--format <value>"'
                - name: then the first argument is being completed
              failure: true
            - name: when calling GetCompletion() with short flag and value
              tests:
                - name: then remaining options are listed
                  failure: true
                  output:
                    - 'completion_test.go:86:'
                    - '    expected:       set(value.Option) == []string{ "--format <value>", "-v" }'
                    - '    value:          []option.Description{'
                    - "                    \toption.Description{"
                    - "                    \t\tOption:      \"--forfmat <value>\","
                    - "                    \t\tDescription: \"communcation format, e.g. 8N1\","
                    - "                    \t},"
                    - "                    \toption.Description{"
                    - "                    \t\tOption:      \"-v\","
                    - "                    \t\tDescription: \"display additional information on startup\","
                    - "                    \t},"
                    - '                    }'
                    - '    $.Option:       { "--forfmat <value>", "-v" }'
                    - '    extra values:   "--forfmat <value>"'
                    - '    missing values: "--format <value>"'
                - name: then the first argument is being completed
              failure: true
            - name: when calling GetCompletion() with exclusive flag
              tests:
                - name: then remaining options are listed
            - name: when calling GetCompletion() with argument and flags
              tests:
                - name: then remaining options are listed
                  failure: true
                  output:
                    - 'completion_test.go:113:'
                    - '    expected:       set(value.Option) == []string{ "--format <value>", "-v", "--timestamp" }'
                    - '    value:          []option.Description{'
                    - "                    \toption.Description{"
                    - "                    \t\tOption:      \"--forfmat <value>\","
                    - "                    \t\tDescription: \"communcation format, e.g. 8N1\","
                    - "                    \t},"
                    - "                    \toption.Description{"
                    - "                    \t\tOption:      \"--timestamp\","
                    - "                    \t\tDescription: \"prefix every line with elapsed time\","
                    - "                    \t},"
                    - "                    \toption.Description{"
                    - "                    \t\tOption:      \"-v\","
                    - "                    \t\tDescription: \"display additional information on startup\","
                    - "                    \t},"
                    - '                    }'
                    - '    $.Option:       { "--forfmat <value>", "--timestamp", "-v" }'
                    - '    extra values:   "--forfmat <value>"'
                    - '    missing values: "--format <value>"'
                - name: then next argument is being completed
              failure: true
          failure: true
      failure: true
    - name: TestFormatOptionDescription
      tests:
        - name: Given a list of argument usage
          tests:
            - name: when calling FormatOptionDescription()
              tests:
                - name: then all descriptions are aligned
        - name: Given a list of argument usage with long descriptions
          tests:
            - name: when calling FormatOptionDescription()
              tests:
                - name: then descriptions is wrapped and aligned accros multiple lines
    - name: TestFormatCompletion
      tests:
        - name: Given a list of completion suggestions
          tests:
            - name: when calling FormatCompletion()
              tests:
                - name: then suggestions are formatted one per line
            - name: when calling FormatCompletion() with narrow width
              tests:
                - name: then long descriptions are truncated
            - name: when calling FormatCompletion() with extremely narrow width
              tests:
                - name: then descriptions are dropped
    - name: TestOptionName
      tests:
        - name: Given a struct with opts tags
          tests:
            - name: when getting the name of a field with long flag
              tests:
                - name: the name includes the long flag
            - name: when getting the name of a field with only short flag
              tests:
                - name: the name includes the short flag
            - name: when getting the name of a positional argument field
              tests:
                - name: the name includes the value name
                - name: the name includes the argument position
            - name: when getting the name of an extra arguments field
              tests:
                - name: the name includes the value name
        - name: Given another struct with opts tags
          tests:
            - name: when getting the name of an extra arguments field
              tests:
                - name: the name includes default name and ellipsis
    - name: TestOptionDescriptionUsage
      tests:
        - name: Given an Option{} with short and long
          tests:
            - name: when calling Usage()
              tests:
                - name: then it returns formatted usage
        - name: Given an Option{} with short only
          tests:
            - name: when calling Usage()
              tests:
                - name: then it returns formatted usage
        - name: Given an Option{} with long only
          tests:
            - name: when calling Usage()
              tests:
                - name: then it returns formatted usage
        - name: Given an Option{} with named value
          tests:
            - name: when calling Usage()
              tests:
                - name: then it returns formatted usage
        - name: Given an positional Option{} with nameonly
          tests:
            - name: when calling Usage()
              tests:
                - name: then it returns formatted usage
    - name: TestOptionDescriptionDescription
      tests:
        - name: Given an Option{} with no description
          tests:
            - name: when calling Usage()
              tests:
                - name: then it returns formatted description
        - name: Given an Option{} with description
          tests:
            - name: when calling Usage()
              tests:
                - name: then it returns formatted description
        - name: Given an Option{} with default and env
          tests:
            - name: when calling Usage()
              tests:
                - name: then it returns formatted description
        - name: Given an Option{} with only default and env
          tests:
            - name: when calling Usage()
              tests:
                - name: then it returns formatted description
    - name: TestOption SetBool
      tests:
        - name: Given a struct with bool options
          tests:
            - name: when calling Set() on a bool field
              tests:
                - name: then the field is set to true
            - name: when calling Set() on a bool pointer field
              tests:
                - name: then the field is set to point to a true value
            - name: when calling Set() on a non-bool field
              tests:
                - name: then it panics
    - name: TestOption SetValue
      tests:
        - name: Given a struct with `opts` tags
          tests:
            - name: when setting the value of a scalar field
              tests:
                - name: with a valid value
                  tests:
                    - name: then the field is set accordingly
                - name: with an invalid value
                  tests:
                    - name: then an error is returned and the value is not changed
            - name: when setting the value of a pointer field
              tests:
                - name: with a valid value
                  tests:
                    - name: then the field is set accordingly
                - name: with an invalid value
                  tests:
                    - name: then an error is returned and the value is not changed
            - name: when setting the value of a slice field
              tests:
                - name: with a single valid value
                  tests:
                    - name: then the field is set accordingly
                - name: with multiple delimited values
                  tests:
                    - name: then all values are recorded
                - name: with empty value
                  tests:
                    - name: then all previous values are deleted
                - name: with invalid value
                  tests:
                    - name: then all values are recorded
    - name: TestOptionSet
    - name: TestNewOptionSet NonStruct
    - name: TestNewOptionSet InvalidFieldType
    - name: TestNewOptionSet InvalidTag
    - name: TestNewOptionSet NestedInvalidTag
    - name: TestNewOptionSet UnexportedField
    - name: TestNewOptionSet WithEmptyOptsTag
    - name: TestNewOptionSet ArgN
    - name: TestNewOptionSet ArgN BadType
    - name: TestNewOptionSet Arg0
    - name: TestNewOptionSet ArgNonInt
    - name: TestNewOptionSet ArgGaps
    - name: TestNewOptionSet ArgDup
    - name: TestNewOptionSet Args
    - name: TestNewOptionSet ArgsDup
    - name: TestNewOptionSet ArgsNotSlice
    - name: TestOption
      tests:
        - name: d
        - name: duration
        - name: "n"
        - name: name
        - name: q
    - name: TestAddSpecialFlag
      tests:
        - name: Given an configured OptionSet
          tests:
            - name: when adding special flag with conflicting short
              tests:
                - name: then short flag is up-cased
            - name: when adding special flag with conflicting short and up-cased short
              tests:
                - name: then short flag is dropped
            - name: when adding special flag with conflicting long
              tests:
                - name: then the existing flag is preserved
    - name: TestApplyDefaults
    - name: TestApplyDefaultsError
    - name: TestApplyEnv
    - name: TestApplyEnvError
    - name: TestApplyArgsCombiningBoolFlags
      tests:
        - name: -ac
        - name: -a -c
        - name: -fabc
        - name: -abfabc
        - name: -afabc -b
        - name: -af abc -b
    - name: TestApplyArgsLongFlags
      tests:
        - name: --aaa --ccc --file abc
        - name: --aaa=false --ccc --file=abc
    - name: TestApplyArgs Delimiter
      tests:
        - name: Given a struct with args field
          tests:
            - name: when arguments contain `--`
              tests:
                - name: then remaining flags are not parsed
            - name: when option value is `--`
              tests:
                - name: then remaining flags are parsed
    - name: TestApplyArgs Errors
      tests:
        - name: --aaa --ddd
        - name: -abgc
        - name: -d4p
        - name: -d 4p
        - name: --duration 4p
        - name: --duration=4p
        - name: a --duration
    - name: TestApplyArgs WithSpecialFlags
      tests:
        - name: --aaa --help
        - name: --aaa -h
        - name: --aaa --version
        - name: --aaa -v
    - name: TestApplyArgs NonFlagArguments
      tests:
        - name: --aaa --duration 5m aaa bbb ccc ddd
    - name: TestApplyArgs NonFlagArguments Errors
      tests:
        - name: --aaa aaa
        - name: --aaa aaa bbb ccc
        - name: --aaa 1 2 ccc
  elapsed: 258ms
  coverage: 100
  skipped: false
- package: github.com/maargenton/go-cli/pkg/value
  tests:
    - name: TestParseBool
    - name: TestParseInt
    - name: TestParseInt8
    - name: TestParseInt16
    - name: TestParseInt32
    - name: TestParseInt64
    - name: TestParseUInt
    - name: TestParseUInt8
    - name: TestParseUInt16
    - name: TestParseUInt32
    - name: TestParseUInt64
    - name: TestParseFloat32
    - name: TestParseFloat64
    - name: TestParseString
    - name: TestRegisterParserPanicsWithInvalidArgument
    - name: TestRegisterParserPanicsWithMultipleParserForTheSameType
    - name: TestFlagValue
    - name: TestFlagValueError
    - name: TestTextUnmarshaller
    - name: TestUnparsable
    - name: TestTimeDuration
    - name: TestParseArgument
  elapsed: 1ms
  coverage: 100
  skipped: false
- package: github.com/maargenton/go-cli/sample/dummyload-demo
  elapsed: 0s
  coverage: 0
  skipped: true
- package: github.com/maargenton/go-cli/sample/sercat-demo
  elapsed: 0s
  coverage: 0
  skipped: true
